generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id      Int    @id @default(autoincrement())
  clerkId String @unique

  courses            Course[]
  payments           Payment[]
  progress           Progress[]
  revenues           Revenue[]
  conversationsA     Conversation[]      @relation("UserA")
  conversationsB     Conversation[]      @relation("UserB")
  messages           Message[]
  withdrawals Withdrawal[]
}

model Admin {
  id             Int      @id @default(autoincrement())
  username       String   @unique
  hashedPassword String
  createAt       DateTime @default(now())
  updateAt       DateTime @updatedAt

  withdrawal Withdrawal[]
}

enum CourseStatus {
  pending
  approved
  rejected
}

model Course {
  id          Int          @id @default(autoincrement())
  title       String
  subtitle    String?
  description String?
  originPrice Decimal      @default(0.0)
  salePrice   Decimal      @default(0.0)
  thumbnail   String
  tag         String?
  status      CourseStatus @default(pending)
  teacherId   Int?
  teacher     User?        @relation(fields: [teacherId], references: [id])
  public      Boolean      @default(false)
  createAt    DateTime     @default(now())
  updateAt    DateTime     @updatedAt

  sections Section[]
  payments Payment[]
  progress Progress[]
  revenues Revenue[]
}

model Section {
  id       Int      @id @default(autoincrement())
  courseId Int
  course   Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  title    String
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt

  lectures Lecture[]
}

enum LectureType {
  video
  file
  link
  text
}

model Lecture {
  id          Int         @id @default(autoincrement())
  sectionId   Int
  section     Section     @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  title       String
  description String?
  content     String?
  type        LectureType @default(video)
  note        String?
  attachments String[]
  canPreview  Boolean     @default(false)
  createAt    DateTime    @default(now())
  updateAt    DateTime    @updatedAt
}

model Payment {
  id        Int           @id @default(autoincrement())
  userId    Int
  user      User          @relation(fields: [userId], references: [id])
  courseId  Int?
  course    Course?       @relation(fields: [courseId], references: [id])
  revenueId Int?
  revenue   Revenue?      @relation(fields: [revenueId], references: [id])
  price     Decimal       @default(0.0)
  status    PaymentStatus @default(pending)
  createAt  DateTime      @default(now())
  updateAt  DateTime      @updatedAt
}

enum PaymentStatus {
  pending
  paid
  canceled
}

model Progress {
  id                Int      @id @default(autoincrement())
  userId            Int
  courseId          Int
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  course            Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  completedLectures Int[]    @default([])
  sectionProgress   Json?
  courseProgress    Float    @default(0.0)
  createAt          DateTime @default(now())
  updateAt          DateTime @updatedAt

  @@unique([userId, courseId])
}

model Conversation {
  id       Int      @id @default(autoincrement())
  userAId  Int
  userBId  Int
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt

  userA User @relation("UserA", fields: [userAId], references: [id], onDelete: Cascade)
  userB User @relation("UserB", fields: [userBId], references: [id], onDelete: Cascade)

  messages Message[]

  @@unique([userAId, userBId])
}

model Message {
  id             Int           @id @default(autoincrement())
  conversationId Int
  senderId       Int
  content        String?
  attachments    String[]
  messageType    MessageType   @default(text)
  status         MessageStatus @default(sent)
  createAt       DateTime      @default(now())

  sender       User         @relation(fields: [senderId], references: [id], onDelete: Cascade)
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
}

enum MessageType {
  text
  image
  file
}

enum MessageStatus {
  sent
  received
  seen
}

model Revenue {
  id                   Int      @id @default(autoincrement())
  teacherId            Int
  teacher              User     @relation(fields: [teacherId], references: [id])
  courseId             Int
  course               Course   @relation(fields: [courseId], references: [id])
  totalRevenue         Decimal  @default(0.0)
  totalWithdrawn       Decimal  @default(0.0)
  serviceFee           Decimal  @default(0.0)
  netRevenue           Decimal  @default(0.0)
  availableForWithdraw Decimal  @default(0.0)
  createAt             DateTime @default(now())
  updateAt             DateTime @updatedAt

  payment Payment[]
}

enum WithdrawalStatus {
  pending
  approved
  rejected
  processing
  completed
}

model Withdrawal {
  id        Int              @id @default(autoincrement())
  teacherId Int
  teacher   User             @relation(fields: [teacherId], references: [id])
  amount    Decimal          @default(0.0)
  status    WithdrawalStatus @default(pending)
  adminId   Int?
  admin     Admin?           @relation(fields: [adminId], references: [id])
  reason    String?
  createAt  DateTime         @default(now())
  updateAt  DateTime         @updatedAt
}
