generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id      Int    @id @default(autoincrement())
  clerkId String @unique

  order  Order[]
  course Course[]
}

model Admin {
  id             Int       @id @default(autoincrement())
  username       String    @unique
  hashedPassword String
  createAt       DateTime  @default(now())
  updateAt       DateTime  @updatedAt
  deleteAt       DateTime?
}

enum CourseStatus {
  pending
  approved
  rejected
}

model Course {
  id          Int          @id @default(autoincrement())
  title       String
  subtitle    String?
  description String?
  originPrice Decimal      @default(0.0)
  salePrice   Decimal      @default(0.0)
  thumbnail   String
  tag         String?
  status      CourseStatus @default(pending)
  teacherId   Int?
  teacher     User?        @relation(fields: [teacherId], references: [id])
  public      Boolean      @default(false)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  section Section[]
  order   Order[]
}

model Section {
  id       Int      @id @default(autoincrement())
  courseId Int
  course   Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  title    String
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt

  lecture Lecture[]
}

enum LectureType {
  video
  file
  link
  text
}

model Lecture {
  id          Int         @id @default(autoincrement())
  sectionId   Int
  section     Section     @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  title       String
  description String?
  content     String?
  type        LectureType @default(video)
  note        String?
  attachments String[]
  canPreview  Boolean     @default(false)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Order {
  id        Int         @id @default(autoincrement())
  userId    Int
  user      User        @relation(fields: [userId], references: [id])
  courseId  Int
  course    Course?     @relation(fields: [courseId], references: [id])
  price     Decimal     @default(0.0)
  status    OrderStatus @default(pending)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  deletedAt DateTime?
  payment   Payment?
}

enum OrderStatus {
  pending
  paid
  canceled
}

model Payment {
  id        Int           @id @default(autoincrement())
  orderId   Int           @unique
  order     Order         @relation(fields: [orderId], references: [id], onDelete: Cascade)
  status    PaymentStatus @default(pending)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

enum PaymentStatus {
  pending
  completed
  failed
  canceled
}
